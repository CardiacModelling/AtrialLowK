#!/usr/bin/env python3
#
import datetime
import matplotlib.dates
import matplotlib.pyplot as plt
import scipy.optimize

date_format = '%Y-%m-%d %H:%M'
points = [[     # 2.5 mM
    ['2020-11-13 13:34', 0],
    ['2020-11-13 15:41', 50],
    ['2020-11-13 17:42', 100],
    ['2020-11-13 19:43', 150],
    ['2020-11-13 21:50', 200],
    ['2020-11-14 00:01', 250],
    ['2020-11-14 02:20', 300],
    ['2020-11-14 04:19', 350],
    ['2020-11-14 06:17', 400],
    ['2020-11-14 08:15', 450],
    ['2020-11-14 10:14', 500],
    ['2020-11-14 12:12', 550],
    ['2020-11-14 14:14', 600],
    ['2020-11-14 16:13', 650],
    ['2020-11-14 18:13', 700],
    ['2020-11-14 20:13', 750],
    ['2020-11-14 23:11', 800],
    ['2020-11-15 01:56', 850],
    ['2020-11-15 03:54', 900],

], [    # 3.2 mM
    ['2020-11-10 00:50', 0],
    ['2020-11-10 01:06', 5],
    ['2020-11-10 01:08', 6],
    ['2020-11-10 01:19', 10],
    ['2020-11-10 01:49', 19],
    ['2020-11-10 02:04', 24],
    ['2020-11-10 02:38', 34],
    ['2020-11-10 03:18', 50],
    ['2020-11-10 05:17', 100],
    ['2020-11-10 07:16', 150],
    ['2020-11-10 09:16', 200],
    ['2020-11-10 11:15', 250],
    ['2020-11-10 12:37', 277],
    ['2020-11-10 13:24', 295],
    ['2020-11-10 13:32', 300],
    ['2020-11-10 14:12', 310],
    ['2020-11-10 14:48', 325],
    ['2020-11-10 15:49', 350],
    ['2020-11-10 16:42', 370],
    ['2020-11-10 17:53', 400],
    ['2020-11-10 19:08', 429],
    ['2020-11-10 19:58', 450],
    ['2020-11-10 21:32', 488],
    ['2020-11-10 21:59', 500],
    ['2020-11-10 23:06', 526],
    ['2020-11-10 23:11', 527],
    ['2020-11-10 23:17', 529],
    ['2020-11-11 00:14', 550],
    ['2020-11-11 03:16', 600],
    ['2020-11-11 05:31', 650],
    ['2020-11-11 07:31', 700],
    ['2020-11-11 09:30', 750],
    ['2020-11-11 11:32', 800],
    ['2020-11-11 12:34', 826],
    ['2020-11-11 13:43', 850],
    ['2020-11-11 15:44', 894],
    ['2020-11-11 16:01', 900],
], [    # 4
    ['2020-11-11 16:37', 0],
    ['2020-11-11 17:03', 10],
    ['2020-11-11 18:24', 43],
    ['2020-11-11 18:38', 50],
    ['2020-11-11 20:46', 100],
    ['2020-11-11 22:48', 150],
    ['2020-11-12 00:56', 200],
    ['2020-11-12 03:13', 250],
    ['2020-11-12 05:12', 300],
    ['2020-11-12 07:11', 350],
    ['2020-11-12 09:09', 400],
    ['2020-11-12 11:08', 437],
    ['2020-11-12 11:57', 450],
    ['2020-11-12 14:02', 500],
    ['2020-11-12 16:33', 550],
    ['2020-11-12 18:35', 600],
    ['2020-11-12 20:38', 650],
    ['2020-11-12 22:42', 700],
    ['2020-11-13 01:04', 750],
    ['2020-11-13 03:05', 800],
    ['2020-11-13 05:03', 850],
    ['2020-11-13 07:02', 900],
], [     # 5.4
    #['2020-11-13 07:16', 0],
    #['2020-11-13 09:11', 50],
    #['2020-11-13 09:50', 64],
    #['2020-11-13 11:15', 100],
    #['2020-11-13 13:31', 150],
    ['2020-11-14 21:41', 0],
    ['2020-11-14 23:36', 50],
    ['2020-11-15 00:15', 64],
    ['2020-11-15 01:40', 100],
    ['2020-11-15 03:56', 150],
    ['2020-11-15 05:55', 200],
    ['2020-11-15 07:54', 250],
    ['2020-11-15 09:52', 300],
    ['2020-11-15 11:53', 350],
    ['2020-11-15 14:00', 400],
    ['2020-11-15 16:00', 450],
    ['2020-11-15 18:03', 500],
    ['2020-11-15 19:53', 550],
    ['2020-11-15 22:00', 600],
    ['2020-11-16 00:03', 650],
    ['2020-11-16 02:02', 700],
    ['2020-11-16 04:00', 750],
    ['2020-11-16 05:59', 800],
    ['2020-11-16 07:58', 850],
    ['2020-11-16 10:00', 900],
], [    # 8
    ['2020-11-16 10:14', 0],
    ['2020-11-16 10:22', 3],
    ['2020-11-16 12:25', 50],
    ['2020-11-16 14:32', 100],
    ['2020-11-16 17:00', 150],
    ['2020-11-16 19:03', 200],
    ['2020-11-16 21:02', 250],
    ['2020-11-16 23:04', 300],
    ['2020-11-17 01:27', 350],
    ['2020-11-17 03:27', 400],
    ['2020-11-17 05:25', 450],
    ['2020-11-17 07:23', 500],
    ['2020-11-17 09:22', 550],
    ['2020-11-17 07:23', 500],
    ['2020-11-17 09:22', 550],
    ['2020-11-17 13:15', 600],
    ['2020-11-17 15:42', 650],
    ['2020-11-17 18:00', 700],
    ['2020-11-17 20:06', 750],
    ['2020-11-17 22:10', 800],
    ['2020-11-18 00:13', 850],
    ['2020-11-18 02:16', 900],
]]
goal = 15 * 60


# Line through the origin, for fitting
def line(x, slope):
    return x * slope


def inv_line(y, slope):
    return y / slope


# Matplotlib date formatting
plot_format = matplotlib.dates.DateFormatter('%Y-%m-%d\n%H:%M')

# Create figure
n = len(points)
fig = plt.figure(figsize=(9, 10))
fig.subplots_adjust(0.05, 0.04, 0.995, 0.995, hspace=0.23)
for i, run in enumerate(points):
    ax = fig.add_subplot(n, 1, 1 + i)

    # Get times and counts
    times, counts = zip(*run)
    times = [datetime.datetime.strptime(t, date_format) for t in times]

    # Plot raw data
    ax.plot(times, counts, '+', color='k')

    # Fit line
    if len(times) > 1:
        durations = [(t - times[0]) for t in times]
        durations = [d.days * 86400 + d.seconds for d in durations]
        p = scipy.optimize.curve_fit(line, durations, counts)[0]

        xs = [0, inv_line(goal, *p)]
        ys = [0, goal]
        xs = [times[0] + datetime.timedelta(seconds=x) for x in xs]
        ax.plot(xs, ys, ':', color='tab:blue')
        ax.plot(xs[-1], ys[-1], 'o', color='tab:blue')

        # Update ticks
        ys = range(0, goal + 1, 100)
        xs = [inv_line(y, *p) for y in ys]
        xs = [times[0] + datetime.timedelta(seconds=x) for x in xs]
        ax.set_xticks(xs)
        ax.set_yticks(ys)

        minutes = int(round(inv_line(goal, *p) / 60))
        hours = minutes // 60
        minutes = minutes % 60
        real_minutes = int(round(durations[-1]) / 60)
        real_hours = real_minutes // 60
        real_minutes = real_minutes % 60
        mtb = int(round(1 / p[0]))
        mtb_seconds = mtb % 60
        mtb_minutes = mtb // 60
        info = f'Projected duration: {hours}h:{minutes:02d}m'
        info += f'\nTime elapsed: {real_hours}h:{real_minutes:02d}m'
        info += f'\nMean time per beat: {mtb_minutes}m:{mtb_seconds:02d}s'
        ax.text(times[0], goal * 0.7, info)

    ax.xaxis.set_major_formatter(plot_format)
    ax.tick_params('x', rotation=0, labelsize='smaller')
    ax.grid(True, color='#dddddd')

# Store
fig.savefig('slow.png')
print('Done!')
